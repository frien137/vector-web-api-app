#!/bin/bash
anki_api_key=luyain9ep5phahP8aph8xa
if [[ ! -f /data/protected/username ]]; then
  if [[ ! -f /data/protected/client.guid ]]; then
     echo "Not authenticated"
     exit 0
  fi
else
  username=$(cat /data/protected/username)
  password=$(cat /data/protected/password)
fi
#
vector_ip=localhost
debug=
if test "$debug" = "true"
    then
       proxystring="-kpx127.0.0.1:8080"
    else
       proxystring=""
fi
client_token_guid=$( cat /data/protected/client.guid )
request_control() {
    curl -H 'Authorization: Bearer '$client_token_guid'' --request POST \
    --data '{"control_request": {"priority": 20} }' --compressed 'https://'$vector_ip'/v1/assume_behavior_control' --insecure
}

# Request hi-priority control:
request_control_hi() {
    curl -H 'Authorization: Bearer '$client_token_guid'' --request POST \
    --data '{"control_request": {"priority": 10} }' --compressed 'https://'$vector_ip'/v1/assume_behavior_control' --insecure
}

# Release control:
release_control() {
    curl -H 'Authorization: Bearer '$client_token_guid'' --request POST \
    --data '{"control_release": {"priority": 20} }' --compressed 'https://'$vector_ip'/v1/assume_behavior_control' --insecure
}

# AlexaOptIn:
alexa_optin() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"opt_in": true}' --compressed 'https://'$vector_ip'/v1/alexa_opt_in' --insecure
}

# Check Alexa State (JSON can be empty)
alexa_check() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"alexa_auth_state": true}' --compressed 'https://'$vector_ip'/v1/alexa_auth_state' --insecure
}

# Drive off charger
drive_off_charger() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"drive_off_charger": true}' --compressed 'https://'$vector_ip'/v1/drive_off_charger' --insecure
}

# Drive on charger
drive_on_charger() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"drive_on_charger": true}' --compressed 'https://'$vector_ip'/v1/drive_on_charger' --insecure
}

# Look around in place:
look_around() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"look_around": true}' --compressed 'https://'$vector_ip'/v1/look_around_in_place' --insecure
}

dock_cube() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"roll_block": true}' --compressed 'https://'$vector_ip'/v1/dock_with_cube' --insecure
}

# Roll cube:
roll_block() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
    --data '{"roll_block": true}' --compressed 'https://'$vector_ip'/v1/roll_block' --insecure
}

# Get battery state:
battery_state() {
    batt_blob=$( curl "$proxystring" -sH 'Authorization: Bearer '$client_guid'' --request POST \
    --data '{"battery_state": true}' --compressed 'https://'$vector_ip'/v1/battery_state' --insecure )  
if test "$debug" = "true"
    then
        echo $batt_blob | tee battery.blob
fi
        batt_level=$( echo $batt_blob | sed -n 's|.*"battery_level":\([^"]*\),.*|\1|p' )
        echo "Vector battery level     : $batt_level"
        batt_volt=$( echo $batt_blob | sed -n 's|.*"battery_volts":\([^"]*\),"is_charging.*|\1|p' )
        echo "Battery voltage          : $batt_volt Volts"
        cube_id=$( echo $batt_blob | sed -n 's|.*"factory_id":"\([^"]*\)".*|\1|p' )
        echo "Cube MAC                 : $cube_id"
        cube_level=$( echo $batt_blob | sed -n 's|.*"cube_battery":{"level":\([^"]*\),.*|\1|p' )
        echo "Cube battery level       : $cube_level"
        cube_volt=$( echo $batt_blob | sed -n 's|.*"e1:70:a0:ac:c4:c4","battery_volts":\([^"]*\),.*|\1|p' )
        echo "Cube voltage             : $cube_volt Volts."
        is_charging=$( echo $batt_blob | sed -n 's|.*"is_charging":\([^"]*\),.*|\1|p' )
        echo "Vector is charging       : $is_charging"
        is_on_charger=$( echo $batt_blob | sed -n 's|.*"is_on_charger_platform":\([^"]*\),.*|\1|p' )
        echo "Vector is on charger     : $is_on_charger"
}


# Snap photo:
snap_pic() {
    json_pic_blob=$( curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' --request POST \
    --data '{"capture_single_image": true}' 'https://'$vector_ip'/v1/capture_single_image' --insecure )

        frame_time_stamp=$( echo $json_pic_blob | sed -n 's|.*"frame_time_stamp":\([^"]*\),.*|\1|p' )
        base64_pic=$( echo $json_pic_blob | sed -n 's|.*"data":"\([^"]*\)".*|\1|p' )
        echo -n $base64_pic | base64 -d > '/tmp/img.jpg'
}

# Set custom eye color:
set_c_eyec() {
    chmod +x /data/protected/ceyec_command
    PROXYS=${proxystring} GUID=${client_token_guid} VICIP=${vector_ip} /data/protected/ceyec_command
    rm /data/protected/ceyec_command
}

# Set custom eye color:
set_locale() {
    chmod +x /data/protected/locale_command
    PROXYS=${proxystring} GUID=${client_token_guid} VICIP=${vector_ip} /data/protected/locale_command
    rm /data/protected/locale_command
}

# Set:
setting_set() {
    chmod +x /data/protected/setting_command
    PROXYS=${proxystring} GUID=${client_token_guid} VICIP=${vector_ip} /data/protected/setting_command
    rm /data/protected/setting_command
}

# Disable custom eye color:
set_p_eyec() {
    curl -H 'Authorization: Bearer '$client_token_guid'' --request POST --data '{"update_settings": true, "settings": {"custom_eye_color": {"enabled": false} } }' 'https://'$vector_ip'/v1/update_settings' --insecure
}

# Get OTA update from ANKI
get_ota() {
curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' \
--data '{:}' --compressed 'https://'$vector_ip'/v1/update_and_restart' --insecure
}

proxy() {
    proxystring="-kpx127.0.0.1:8080"
}

# Say Text
say_text() {
    curl "$proxystring" -H 'Authorization: Bearer '$client_token_guid'' --request POST \
    --data '{"text": "hello", "use_vector_voice": true, "duration_scalar": 1.0}' --compressed 'https://'$vector_ip'/v1/say_text' --insecure
}

main() {
    if [[ "$#" -eq 0 ]]; then
        printf "%s\\n" "$prog_name: Argument required"
        printf "%s\\n" "Try '$prog_name --help' for more information."
        exit 1
    fi

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -batt | --battery_state)
                battery_state
                ;;
            -reqc | --control_request)
                request_control
                ;;
            -reqchi | --control_request_hi)
                request_control_hi
                ;;
            -relc | --control_release)
                release_control
                ;;
            -droffc | --drive_off_charger)
                drive_off_charger
                ;;
            -dronc | --drive_on_charger)
                drive_on_charger
                ;;
            -look | --look_around)
                look_around
                ;;
            -dock | --dock_with_cube)
                dock_cube
                ;;
            -roll | --roll_block)
                roll_block
                ;;
            -pic | --capture_single_image)
                snap_pic
                ;;
            -say | --say_text)
                say_text
                ;;
            -ota | --get_ota)
                get_ota
                ;;
            --set_c_eyec)
                set_c_eyec
                ;;
            --set_p_eyec)
                set_p_eyec
                ;;
            --set_locale)
                set_locale
                ;;
            --setting)
                setting_set
                ;;
            --say_text)
                say_text
                ;;
            -p | --proxy)
                proxy
                ;;
            -i | --info)
                banner
                print_info
                ;;
            -v | --version)
                banner
                print_version
                ;;
            -h | --help)
                banner
                usage
                exit 0
                ;;
            -- | -* | *)
                printf "%s\\n" "$prog_name: Invalid option '$1'"
                printf "%s\\n" "Try '$prog_name --help' for more information."
                exit 1
                ;;
        esac
        shift
    done
}


main "$@"
